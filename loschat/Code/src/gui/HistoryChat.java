package gui;import javafx.event.EventHandler;import javafx.geometry.Insets;import javafx.geometry.Pos;import javafx.scene.Scene;import javafx.scene.control.Label;import javafx.scene.control.ScrollPane;import javafx.scene.control.ScrollPane.ScrollBarPolicy;import javafx.scene.control.TextField;import javafx.scene.image.Image;import javafx.scene.image.ImageView;import javafx.scene.input.KeyCode;import javafx.scene.input.KeyEvent;import javafx.scene.layout.*;import javafx.scene.paint.Color;import javafx.scene.shape.Line;import javafx.scene.shape.Rectangle;import javafx.scene.text.Font;import javafx.stage.Modality;import javafx.stage.Stage;import utils.Analysis;import utils.ClientHistoryReader;import utils.StringHistorySearch;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * this class is to show history message * @author Zongshi * @version 2020-3-17 */public class HistoryChat {	static String account;	static String chattingAccount;	static String path;	/**	 * Setter of the chattingAccount.	 * @param account The user account of the client.	 */	static void setChattingAccount(String chatAccount) {		chattingAccount = chatAccount;	}	/**	 * Setter of the account.	 * @param account The user account of the client.	 */	static void setAccount(String theAccount) {		account = theAccount;	}	/**	 * Setter of the path.	 * @param account The path of file need to be read.	 */	static void setPath(String thePath) {		path = thePath;	}	/**	 * This method is to return a boolean value indicating whether the string is all numeric or not.	 * @param str The input string will be either the user_account or the group_id.	 * @return A boolean value indicating it is a user_account or group_id, a user_account if return false, a group_id if return true.	 */	public static boolean isNumeric(String str){		Pattern pattern = Pattern.compile("[0-9]+");		Matcher isNum = pattern.matcher(str);		if(!isNum.matches()) {			return false;		}		return true;	}	// This method is to trigger the display of the history chat record page.    @SuppressWarnings("unchecked")	static void display(String title) throws FileNotFoundException {        Stage window = new Stage();        window.setTitle(title);        //block input events or interactions with other windows        //until this one is taken care of        window.initModality(Modality.APPLICATION_MODAL); //make this window modal (模态窗口)        VBox vBox =new VBox(10);//------------------------------------------------        //elements: user(HBox), search(StackPane), list(ScrollPane)        HBox hBox = new HBox(10);        hBox.setAlignment(Pos.CENTER_LEFT);        //hBox.setStyle("-fx-background-color: #FFFFFF");        hBox.setMaxWidth(340);        //user image        FileInputStream file = new FileInputStream("src/gui/images/icon_user.png");        Image detailUserImage = new Image(file);        ImageView userImage = new ImageView(detailUserImage);        //username        String name = "username";        Label userName = new Label(name);        //hBox.getChildren().addAll(userImage, userName);        hBox.getChildren().addAll(userName);        //searching        StackPane searching = new StackPane();        searching.setMaxSize(340, 40);        searching.setStyle("-fx-background-color: #EDEDED");        Rectangle rect = new Rectangle(320,25);        rect.setArcHeight(20);        rect.setArcWidth(20);        rect.setStroke(null);        rect.setFill(Color.WHITE);        TextField searchUser = new TextField();        searchUser.setMaxSize(300, 15);        searchUser.setFont(new Font("Arial", 8));        String styles1 =                "-fx-background-color: #FFFFFF;" +                        "-fx-border-color: #FFFFFF;" ;        searchUser.setStyle(styles1);        searchUser.setPromptText("Searching");                searching.getChildren().addAll(rect, searchUser);        StackPane.setMargin(rect, new Insets(7,13,8,12));        //line        Line line = new Line(0,0, 400,0);//x1,y1, x2,y2        line.setStroke(Color.LIGHTGRAY);        //here is the user list        //list        ScrollPane scrollPane = new ScrollPane();        scrollPane.setVbarPolicy(ScrollBarPolicy.ALWAYS);        scrollPane.setHbarPolicy(ScrollBarPolicy.AS_NEEDED);        scrollPane.setPrefViewportHeight(300);        scrollPane.managedProperty();        scrollPane.setBackground(new Background(new BackgroundFill(null, null, null)));        // Add label for chat history record.        Label textAreaHistory = new Label(); //bubble        textAreaHistory.setWrapText(true);        textAreaHistory.setManaged(true);        // Use ClientHistoryReader function here to get the record.        ClientHistoryReader clientHistoryReader = new ClientHistoryReader(account,chattingAccount,isNumeric(chattingAccount));		String history = clientHistoryReader.readHistoryRecord();        textAreaHistory.setText(history);        scrollPane.setContent(textAreaHistory);                scrollPane.setPadding(new Insets(0,40,0,40));        scrollPane.setFitToWidth(true);        // Listener of enter key to trigger the search of keyword.        searchUser.setOnKeyPressed(new EventHandler<KeyEvent>() {        	        	public void handle(KeyEvent ke) {        		if (ke.getCode() == KeyCode.ENTER) {        			// Add string history search here.        			StringHistorySearch stringHistorySearch = new StringHistorySearch(history,searchUser.getText());        			String result = stringHistorySearch.searchInside();        			textAreaHistory.setText(result);        		} else if(ke.getCode() == KeyCode.BACK_SPACE) { // When delete all the input from the searchUser,re-display all online user.        			        			if(searchUser.getText().length() == 1) {        				try {        					textAreaHistory.setText(history);            			} catch (Exception e) {            				e.printStackTrace();            			}        			}        		}        		}        		});        VBox.setMargin(hBox, new Insets(15, 0, 0, 0)); //top,right,bottom, left        vBox.getChildren().addAll(hBox, searching, line, scrollPane);//------------------------------------------------        vBox.setAlignment(Pos.CENTER);        Scene scene = new Scene(vBox, 400, 400);        window.setScene(scene);        window.showAndWait(); //shows this stage and waits for it to be hidden before return to the caller    }        //---------------------------------------------------------------------------------------------------------    // Another display function for OverallSearchPage to use.    static void display() throws FileNotFoundException {        Stage window = new Stage();        window.setTitle("Detail History");        window.initModality(Modality.APPLICATION_MODAL); //make this window modal (模态窗口)        VBox vBox =new VBox(10);//------------------------------------------------        //elements: user(HBox), search(StackPane), list(ScrollPane)        HBox hBox = new HBox(10);        hBox.setAlignment(Pos.CENTER_LEFT);        //hBox.setStyle("-fx-background-color: #FFFFFF");        hBox.setMaxWidth(340);        //user image        FileInputStream file = new FileInputStream("src/gui/images/icon_user.png");        Image detailUserImage = new Image(file);        ImageView userImage = new ImageView(detailUserImage);        //username        String name = "username";        Label userName = new Label(name);        //hBox.getChildren().addAll(userImage, userName);        hBox.getChildren().addAll(userName);        //searching        StackPane searching = new StackPane();        searching.setMaxSize(340, 40);        searching.setStyle("-fx-background-color: #EDEDED");        Rectangle rect = new Rectangle(320,25);        rect.setArcHeight(20);        rect.setArcWidth(20);        rect.setStroke(null);        rect.setFill(Color.WHITE);        TextField searchUser = new TextField();        searchUser.setMaxSize(300, 15);        searchUser.setFont(new Font("Arial", 8));        String styles1 =                "-fx-background-color: #FFFFFF;" +                        "-fx-border-color: #FFFFFF;" ;        searchUser.setStyle(styles1);        searchUser.setPromptText("Searching");                searching.getChildren().addAll(rect, searchUser);        StackPane.setMargin(rect, new Insets(7,13,8,12));        //line        Line line = new Line(0,0, 400,0);//x1,y1, x2,y2        line.setStroke(Color.LIGHTGRAY);        //here is the user list        //list        ScrollPane scrollPane = new ScrollPane();        scrollPane.setVbarPolicy(ScrollBarPolicy.ALWAYS);        scrollPane.setHbarPolicy(ScrollBarPolicy.AS_NEEDED);        scrollPane.setPrefViewportHeight(300);        scrollPane.managedProperty();        scrollPane.setBackground(new Background(new BackgroundFill(null, null, null)));        // Add label for history record.        Label textAreaHistory = new Label(); //bubble        textAreaHistory.setWrapText(true);        textAreaHistory.setManaged(true);        // Add client history reader here.        ClientHistoryReader clientHistoryReader = new ClientHistoryReader();		String history = clientHistoryReader.readHistory(path);	        textAreaHistory.setText(history);        scrollPane.setContent(textAreaHistory);                scrollPane.setPadding(new Insets(0,40,0,40));        scrollPane.setFitToWidth(true);        // Listener of enter key to trigger the search of keyword.        searchUser.setOnKeyPressed(new EventHandler<KeyEvent>() {        	        	public void handle(KeyEvent ke) {        		if (ke.getCode() == KeyCode.ENTER) {        			// Add string history search here.        			StringHistorySearch stringHistorySearch = new StringHistorySearch(history,searchUser.getText());        			String result = stringHistorySearch.searchInside();        			textAreaHistory.setText(result);        		} else if(ke.getCode() == KeyCode.BACK_SPACE) { // When delete all the input from the searchUser,re-display all online user.        			        			if(searchUser.getText().length() == 1) {        				try {        					textAreaHistory.setText(history);            			} catch (Exception e) {            				e.printStackTrace();            			}        			}        		}        		}        		});        VBox.setMargin(hBox, new Insets(15, 0, 0, 0)); //top,right,bottom, left        vBox.getChildren().addAll(hBox, searching, line, scrollPane);//------------------------------------------------        vBox.setAlignment(Pos.CENTER);        Scene scene = new Scene(vBox, 400, 400);        window.setScene(scene);        window.showAndWait(); //shows this stage and waits for it to be hidden before return to the caller    }}